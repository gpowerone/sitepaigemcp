/*
Sitepaige v1.0.0
Security Middleware
WARNING: This file is automatically generated and should not be modified.
*/

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';


function nonce(len = 16) {
  // cryptographically-strong, base64 nonce
  const arr = new Uint8Array(len)
  crypto.getRandomValues(arr)
  return Buffer.from(arr).toString('base64')
}


export function middleware(request: NextRequest) {
  // Create a new response
  const response = NextResponse.next();

  // Get request headers
  // const nonce = Buffer.from(crypto.randomUUID()).toString('base64');
  
  // Add security headers
  response.headers.set('X-DNS-Prefetch-Control', 'on');
  response.headers.set('X-Content-Type-Options', 'nosniff');
  response.headers.set('X-Frame-Options', 'DENY');
  response.headers.set('X-XSS-Protection', '1; mode=block');
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');
  
  // Add HSTS header (Strict Transport Security)
  if (process.env.NODE_ENV === 'production') {
    response.headers.set(
      'Strict-Transport-Security',
      'max-age=31536000; includeSubDomains'
    );
  }
  
  const n = nonce()

  // expose the nonce to your app via a header
  response.headers.set('x-nonce', n)

  // Build CSP depending on env
  const isProd = process.env.NODE_ENV === 'production'

  // Common bits (both envs)
  // - worker-src blob: for Next workers
  // - img/font data: for inlined assets
  // - frame-ancestors 'none' to prevent clickjacking
  // - base-uri/form-action locked to self
  const common = `
    default-src 'self';
    style-src 'self' 'unsafe-inline' https:;
    img-src 'self' data: https: blob:;
    font-src 'self' https: data:;
    worker-src 'self' blob:;
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
  `.replace(/\s{2,}/g, ' ').trim()

  // NOTE on 'strict-dynamic':
  //  - Great with nonces for modern browsers; allows nonceâ€™d bootstrap script to load others
  //  - Safari support has lagged historically; including 'self' and https: keeps it functional there
  // Avoid 'unsafe-inline' in script-src in prod.
  const prod = `
    script-src 'self' 'nonce-${n}' 'strict-dynamic' https:;
    connect-src 'self' https: wss:;
    upgrade-insecure-requests;
  `.replace(/\s{2,}/g, ' ').trim()

  // Dev: allow eval and WS endpoints for Webpack HMR and source maps
  // - 'unsafe-eval' is required for eval-based sourcemaps/HMR
  // - connect-src includes ws: and wss: and http(s) for dev servers
  // - include blob: in script-src because Next/webpack sometimes create blob: URLs
  //   for dynamic chunks/workers in dev
  const dev = `
    script-src 'self' 'nonce-${n}' 'strict-dynamic' https: http: blob: 'unsafe-eval' 'unsafe-inline';
    connect-src 'self' http: https: ws: wss:;
  `.replace(/\s{2,}/g, ' ').trim()

  const csp = `${common} ${isProd ? prod : dev}`.trim()

  // Using Report-Only mode to monitor CSP violations without breaking functionality
  response.headers.set('Content-Security-Policy-Report-Only', csp)
    
  // Add CSRF token generation for state-changing requests
  if (request.method !== 'GET' && request.method !== 'HEAD') {
    const csrfToken = request.cookies.get('csrf-token')?.value;
    
    // If no CSRF token exists, generate one
    if (!csrfToken) {
      const newCsrfToken = crypto.randomUUID();
      response.cookies.set({
        name: 'csrf-token',
        value: newCsrfToken,
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        maxAge: 60 * 60 * 24, // 24 hours
        path: '/'
      });
    }
  }
    
  
  return response;
}

// Configure which routes the middleware runs on
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|public).*)',
  ],
};
