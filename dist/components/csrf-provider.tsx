'use client';

/*
Sitepaige v1.0.0
CSRF Provider Component
WARNING: This file is automatically generated and should not be modified.
*/

import React, { createContext, useContext, useEffect, useState } from 'react';

interface CsrfContextType {
  csrfToken: string | null;
  headers: HeadersInit;
}

const CsrfContext = createContext<CsrfContextType>({
  csrfToken: null,
  headers: {}
});

export function CsrfProvider({ children }: { children: React.ReactNode }) {
  const [csrfToken, setCsrfToken] = useState<string | null>(null);

  useEffect(() => {
    // Get CSRF token from cookies
    const token = document.cookie
      .split('; ')
      .find(row => row.startsWith('csrf-token='))
      ?.split('=')[1];
    
    setCsrfToken(token || null);
  }, []);

  // Headers to include with API requests
  const headers: HeadersInit = csrfToken 
    ? { 'X-CSRF-Token': csrfToken }
    : {};

  return (
    <CsrfContext.Provider value={{ csrfToken, headers }}>
      {children}
    </CsrfContext.Provider>
  );
}

export function useCsrf() {
  const context = useContext(CsrfContext);
  if (!context) {
    throw new Error('useCsrf must be used within a CsrfProvider');
  }
  return context;
}

// Helper function to make fetch requests with CSRF token
export async function fetchWithCsrf(url: string, options: RequestInit = {}) {
  const token = document.cookie
    .split('; ')
    .find(row => row.startsWith('csrf-token='))
    ?.split('=')[1];

  const headers = {
    ...options.headers,
    ...(token ? { 'X-CSRF-Token': token } : {})
  };

  return fetch(url, {
    ...options,
    headers
  });
}
